name: Test MCP Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run linting
      run: yarn lint
        
    - name: Build project
      run: yarn build
        
    - name: Verify build artifacts
      run: |
        if [ ! -f "build/server.js" ]; then
          echo "❌ Build failed: server.js not found"
          ls -la build/ || echo "Build directory missing"
          exit 1
        fi
        echo "✅ Build artifacts verified"
        
    - name: Test MCP server
      run: |
        cat > test_mcp.mjs << 'EOF'
        import { spawn } from 'child_process';
        
        console.log('Testing MCP server...');
        
        const server = spawn('node', ['build/server.js', '--stdio'], {
          stdio: ['pipe', 'pipe', 'pipe']
        });
        
        let serverReady = false;
        let responses = 0;
        
        const cleanup = (code) => {
          server.kill('SIGTERM');
          process.exit(code);
        };
        
        server.stderr.on('data', (data) => {
          if (data.toString().includes('OSRS MCP Server Running')) {
            serverReady = true;
            sendTestMessages();
          }
        });
        
        server.stdout.on('data', (data) => {
          console.log('Response:', data.toString().trim());
          responses++;
          if (responses >= 2) {
            console.log('✅ MCP server test passed');
            cleanup(0);
          }
        });
        
        const sendTestMessages = () => {
          const initMsg = JSON.stringify({
            jsonrpc: "2.0",
            id: 1,
            method: "initialize",
            params: {
              protocolVersion: "2024-11-05",
              capabilities: {},
              clientInfo: { name: "ci-test", version: "1.0.0" }
            }
          }) + '\n';
          
          const toolsMsg = JSON.stringify({
            jsonrpc: "2.0",
            id: 2,
            method: "tools/list"
          }) + '\n';
          
          server.stdin.write(initMsg);
          setTimeout(() => server.stdin.write(toolsMsg), 500);
        };
        
        server.on('error', (err) => {
          console.error('❌ Server error:', err.message);
          cleanup(1);
        });
        
        setTimeout(() => {
          console.log('❌ Test timeout');
          cleanup(1);
        }, 15000);
        EOF
        
        node test_mcp.mjs
name: Test MCP Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run linting
      run: yarn lint
      
    - name: Debug environment before build
      run: |
        echo "Node version: $(node --version)"
        echo "Yarn version: $(yarn --version)"
        echo "TypeScript version:"
        yarn list typescript || echo "TypeScript not found in dependencies"
        echo "Current directory: $(pwd)"
        echo "Files in project root:"
        ls -la
        
    - name: Build project
      run: |
        echo "Starting build process..."
        yarn build --verbose || {
          echo "Primary build command failed with exit code $?"
          echo "Debugging TypeScript availability:"
          which tsc || echo "tsc not found in global PATH"
          yarn exec tsc --version || echo "tsc not available via yarn exec"
          
          echo "Trying alternative build methods..."
          
          # Try using npx
          echo "Attempting build with npx tsc..."
          npx tsc --outDir build && echo "✅ npx build succeeded" && exit 0
          
          # Try direct yarn exec
          echo "Attempting build with yarn exec tsc..."
          yarn exec tsc --outDir build && echo "✅ yarn exec build succeeded" && exit 0
          
          # Try installing TypeScript globally and building
          echo "Installing TypeScript globally as fallback..."
          npm install -g typescript
          tsc --outDir build && echo "✅ global tsc build succeeded" && exit 0
          
          echo "❌ All build methods failed"
          echo "Final debug info:"
          echo "tsconfig.json content:"
          cat tsconfig.json
          echo "Available commands:"
          yarn bin || echo "yarn bin failed"
          exit 1
        }
        
    - name: Verify build artifacts
      run: |
        echo "Contents of project root after build:"
        ls -la
        echo "Contents of build directory:"
        ls -la build/ || {
          echo "Build directory does not exist!"
          echo "Available directories:"
          find . -type d -name "*build*" || echo "No build-related directories found"
          exit 1
        }
        if [ ! -f "build/server.js" ]; then
          echo "❌ Build failed: server.js not found"
          echo "Files in build directory:"
          ls -la build/
          exit 1
        fi
        echo "✅ Build artifacts verified successfully"
        
    - name: Test server startup
      run: |
        # Start server in background with timeout
        timeout 30s node build/server.js --stdio &
        SERVER_PID=$!
        
        # Give server time to start
        sleep 5
        
        # Check if server is still running
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Server started successfully"
          kill $SERVER_PID
        else
          echo "❌ Server failed to start or crashed"
          exit 1
        fi
        
    - name: Test with MCP Inspector (headless)
      run: |
        # Install inspector if not already available
        npm install -g @modelcontextprotocol/inspector
        
        # Start server in background
        node build/server.js --stdio &
        SERVER_PID=$!
        
        # Give server time to start
        sleep 3
        
        # Test that inspector can connect (this will fail in headless mode but we can check basic functionality)
        echo "Server PID: $SERVER_PID"
        
        # Clean shutdown
        kill $SERVER_PID || true
        
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build project
      run: yarn build
      
    - name: Run integration tests
      run: |
        # Create a simple test script to verify MCP server functionality
        cat > test_mcp.mjs << 'EOF'
        import { spawn } from 'child_process';
        import { setTimeout } from 'timers/promises';
        
        console.log('Starting MCP server integration test...');
        
        const server = spawn('node', ['build/server.js', '--stdio'], {
          stdio: ['pipe', 'pipe', 'pipe']
        });
        
        let output = '';
        server.stdout.on('data', (data) => {
          output += data.toString();
          console.log('Server output:', data.toString().trim());
        });
        
        server.stderr.on('data', (data) => {
          console.error('Server error:', data.toString().trim());
        });
        
        // Send initialize request
        setTimeout(async () => {
          const initMessage = JSON.stringify({
            jsonrpc: "2.0",
            id: 1,
            method: "initialize",
            params: {
              protocolVersion: "2024-11-05",
              capabilities: {},
              clientInfo: { name: "test-client", version: "1.0.0" }
            }
          }) + '\n';
          
          console.log('Sending initialize message...');
          server.stdin.write(initMessage);
          
          await setTimeout(2000);
          
          // Send tools/list request
          const toolsMessage = JSON.stringify({
            jsonrpc: "2.0",
            id: 2,
            method: "tools/list"
          }) + '\n';
          
          console.log('Sending tools/list message...');
          server.stdin.write(toolsMessage);
          
          await setTimeout(2000);
          
          console.log('Test completed, shutting down server...');
          server.kill('SIGTERM');
          
          // Check if we got expected responses
          if (output.includes('"result"') && output.includes('tools')) {
            console.log('✅ Integration test passed - MCP server responded correctly');
            process.exit(0);
          } else {
            console.log('❌ Integration test failed - unexpected server response');
            console.log('Full output:', output);
            process.exit(1);
          }
        }, 1000);
        
        server.on('exit', (code) => {
          console.log(`Server exited with code ${code}`);
        });
        
        // Timeout after 10 seconds
        setTimeout(() => {
          console.log('Test timeout - killing server');
          server.kill('SIGKILL');
          process.exit(1);
        }, 10000);
        EOF
        
        node test_mcp.mjs